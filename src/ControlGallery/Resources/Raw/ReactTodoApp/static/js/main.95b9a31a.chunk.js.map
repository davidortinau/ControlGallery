{"version":3,"sources":["components/Form.js","components/FilterButton.js","components/Todo.js","hybridwebview/HybridWebView.js","App.js","index.js"],"names":["Form","props","useState","name","setName","onSubmit","e","preventDefault","trim","addTask","className","htmlFor","type","id","autoComplete","value","onChange","target","FilterButton","aria-pressed","isPressed","onClick","setFilter","Todo","isEditing","setEditing","newName","setNewName","editFieldRef","useRef","editButtonRef","wasEditing","ref","useEffect","current","usePrevious","editingTemplate","editTask","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","focus","HybridWebView","SendRawMessageToDotNet","message","this","SendMessageToDotNet","SendInvokeMessageToDotNet","methodName","paramValues","Array","isArray","i","length","JSON","stringify","messageType","messageContent","window","chrome","webview","postMessage","webkit","messageHandlers","webwindowinterop","hybridWebViewHost","sendMessage","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","isLoading","setIsLoading","updatedTasks","map","remainingTasks","editedTaskList","taskList","key","filterList","tasksNoun","headingText","listHeadingRef","prevTaskLength","globalSetData","newData","console","log","newTask","nanoid","tabIndex","aria-labelledby","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95b9a31a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Form(props) {\r\n  const [name, setName] = useState('');\r\n\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (!name.trim()) {\r\n      return;\r\n    }\r\n    props.addTask(name);\r\n    setName(\"\");\r\n  }\r\n\r\n\r\n  function handleChange(e) {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2 className=\"label-wrapper\">\r\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n          What needs to be done?\r\n        </label>\r\n      </h2>\r\n\r\n      <input\r\n        type=\"text\"\r\n        id=\"new-todo-input\"\r\n        className=\"input input__lg\"\r\n        name=\"text\"\r\n        autoComplete=\"off\"\r\n        value={name}\r\n        onChange={handleChange}\r\n      />\r\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n        Add\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nfunction FilterButton(props) {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn toggle-btn\"\r\n      aria-pressed={props.isPressed}\r\n      onClick={() => props.setFilter(props.name)}\r\n    >\r\n      <span className=\"visually-hidden\">Show </span>\r\n      <span>{props.name}</span>\r\n      <span className=\"visually-hidden\"> tasks</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default FilterButton;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nexport default function Todo(props) {\r\n  const [isEditing, setEditing] = useState(false);\r\n  const [newName, setNewName] = useState('');\r\n\r\n  const editFieldRef = useRef(null);\r\n  const editButtonRef = useRef(null);\r\n\r\n  const wasEditing = usePrevious(isEditing);\r\n\r\n  function handleChange(e) {\r\n    setNewName(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (!newName.trim()) {\r\n      return;\r\n    }\r\n    props.editTask(props.id, newName);\r\n    setNewName(\"\");\r\n    setEditing(false);\r\n  }\r\n\r\n  const editingTemplate = (\r\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label className=\"todo-label\" htmlFor={props.id}>\r\n          New name for {props.name}\r\n        </label>\r\n        <input\r\n          id={props.id}\r\n          className=\"todo-text\"\r\n          type=\"text\"\r\n          value={newName || props.name}\r\n          onChange={handleChange}\r\n          ref={editFieldRef}\r\n        />\r\n      </div>\r\n      <div className=\"btn-group\">\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn todo-cancel\"\r\n          onClick={() => setEditing(false)}\r\n        >\r\n          Cancel\r\n          <span className=\"visually-hidden\">renaming {props.name}</span>\r\n        </button>\r\n        <button type=\"submit\" className=\"btn btn__primary todo-edit\">\r\n          Save\r\n          <span className=\"visually-hidden\">new name for {props.name}</span>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n\r\n  const viewTemplate = (\r\n    <div className=\"stack-small\">\r\n      <div className=\"c-cb\">\r\n          <input\r\n            id={props.id}\r\n            type=\"checkbox\"\r\n            defaultChecked={props.completed}\r\n            onChange={() => props.toggleTaskCompleted(props.id)}\r\n          />\r\n          <label className=\"todo-label\" htmlFor={props.id}>\r\n            {props.name}\r\n          </label>\r\n        </div>\r\n        <div className=\"btn-group\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn\"\r\n          onClick={() => setEditing(true)}\r\n          ref={editButtonRef}\r\n          >\r\n            Edit <span className=\"visually-hidden\">{props.name}</span>\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn__danger\"\r\n            onClick={() => props.deleteTask(props.id)}\r\n          >\r\n            Delete <span className=\"visually-hidden\">{props.name}</span>\r\n          </button>\r\n        </div>\r\n    </div>\r\n  );\r\n\r\n\r\n  useEffect(() => {\r\n    if (!wasEditing && isEditing) {\r\n      editFieldRef.current.focus();\r\n    }\r\n    if (wasEditing && !isEditing) {\r\n      editButtonRef.current.focus();\r\n    }\r\n  }, [wasEditing, isEditing]);\r\n\r\n\r\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\r\n}\r\n","// Standard methods for HybridWebView\n\nexport default class HybridWebView {\n\n  static SendRawMessageToDotNet = function (message) {\n    this.SendMessageToDotNet(0, message);\n  }\n\n  static SendInvokeMessageToDotNet = function (methodName, paramValues) {\n    if (typeof paramValues !== 'undefined') {\n      if (!Array.isArray(paramValues)) {\n        paramValues = [paramValues];\n      }\n      for (var i = 0; i < paramValues.length; i++) {\n        paramValues[i] = JSON.stringify(paramValues[i]);\n      }\n    }\n\n    this.SendMessageToDotNet(1, JSON.stringify({ \"MethodName\": methodName, \"ParamValues\": paramValues }));\n  }\n\n  static SendMessageToDotNet = function (messageType, messageContent) {\n    var message = JSON.stringify({ \"MessageType\": messageType, \"MessageContent\": messageContent });\n\n    if (window.chrome && window.chrome.webview) {\n      // Windows WebView2\n      window.chrome.webview.postMessage(message);\n    }\n    else if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.webwindowinterop) {\n      // iOS and MacCatalyst WKWebView\n      window.webkit.messageHandlers.webwindowinterop.postMessage(message);\n    }\n    else {\n      // Android WebView\n      window.hybridWebViewHost.sendMessage(message);\n    }\n  }\n};\n","import React, { useState, useRef, useEffect } from \"react\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\nimport { nanoid } from \"nanoid\";\nimport HybridWebView from './hybridwebview/HybridWebView.js';\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: (task) => !task.completed,\n  Completed: (task) => task.completed,\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState(\"All\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map((task) => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new obkect\n        // whose `completed` prop has been inverted\n        return { ...task, completed: !task.completed };\n      }\n      return task;\n    });\n    HybridWebView.SendInvokeMessageToDotNet(\"ToggleCompletedTask\", [id]);\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter((task) => id !== task.id);\n    HybridWebView.SendInvokeMessageToDotNet(\"DeleteTask\", [id]);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map((task) => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return { ...task, name: newName };\n      }\n      return task;\n    });\n    HybridWebView.SendInvokeMessageToDotNet(\"EditTask\", [id, newName]);\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks\n    .filter(FILTER_MAP[filter])\n    .map((task) => (\n      <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTask={deleteTask}\n        editTask={editTask}\n      />\n    ));\n\n  const filterList = FILTER_NAMES.map((name) => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    HybridWebView.SendInvokeMessageToDotNet(\"AddTask\", [newTask]);\n    setTasks([...tasks, newTask]);\n  }\n\n  const tasksNoun = taskList.length !== 1 ? \"tasks\" : \"task\";\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  const listHeadingRef = useRef(null);\n  const prevTaskLength = usePrevious(tasks.length);\n\n  window.globalSetData = function(newData)\n  {\n    setIsLoading(false);\n    setTasks(newData);\n    console.log(\"New data arrived with \" + newData.length + \" item(s)\");\n  };\n\n  useEffect(() => {\n    if (tasks.length - prevTaskLength === -1) {\n      listHeadingRef.current.focus();\n    }\n\n    // Start initial data load\n    console.log(\"Start loading...\");\n    HybridWebView.SendInvokeMessageToDotNet(\"StartTaskLoading\");\n  }, [tasks.length, prevTaskLength]);\n\n\n  //window.setTimeout(function() { setIsLoading(false);}, 2000);\n\n  if (isLoading) {\n    return (\n      <div className=\"todoapp stack-large\">\n        <h2>Loading items...</h2>\n      </div>\n    );\n  }\n  else {\n    return (\n      <div className=\"todoapp stack-large\">\n        <Form addTask={addTask} />\n        <div className=\"filters btn-group stack-exception\">{filterList}</div>\n        <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n          {headingText}\n        </h2>\n        <ul\n          className=\"todo-list stack-large stack-exception\"\n          aria-labelledby=\"list-heading\">\n          {taskList}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}